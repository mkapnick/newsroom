head
  include  _resources.jade
body
  .navbar
    img(src="/public/images/iime.png" id="img-iime")

  #treemap

  script(src="http://momentjs.com/downloads/moment.min.js")
  script(src="http://www.d3plus.org/js/d3.js")
  script(src="/public/js/d3plus.js")

  script.
    var date;
    date = moment(new Date()).format('YYYY/MM/DD');

    function TreeMap() {
      var treeData = {};

      function loadData() {
        $.ajax({
          type: 'GET',
          url: '/data',
          dataType: 'json',
          success: function (data) {
            if (data) {
              treeData = data;
              renderData();
            }
          }
        });
      }

      function renderData() {
        d3plus.viz()
        .container("#treemap")  // container DIV to hold the visualization
        .data(treeData)  // data to use with the vis
        .type("tree_map")   // visualization type
        .id(['name'])         // key for which our data is unique on
        .size("size")      // sizing of blocks
        .dev(true)
        .time({
          "value": "date",
          "solo": date
        })
        .timeline({
          tick: {
            color: '#57068c'
          }
        })
        .timing({
          transitions: 1000
        })
        .margin("10px 0px 60px 0px")
        .color('color')
        .format({
          "text": function (text, params) {

            if (text === "size") {
              return "Number of related articles";
            }
            else if (text === 'share') {
              return 'Title similarity'
            }
            else {
              return d3plus.string.title(text, params);
            }
          }
        })
        .draw() // finally, draw the visualization!

        //wait 3 seconds (enough time to draw the visualization) and
        //then call the timeline
        setTimeout(function () {
          _loopTimeLine();
        }, 3000);

      }

      function _loopTimeLine() {
        d3.select('.d3plus_timeline_play').on('click')();
      }

      return {
        loadData,
        renderData
      };
    }

    new TreeMap().loadData();




